// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id                   String                 @id @default(cuid())
  name                 String?
  email                String?                @unique
  emailVerified        DateTime?
  image                String?
  createdAt            DateTime               @default(now()) @map(name: "created_at")
  updatedAt            DateTime               @default(now()) @map(name: "updated_at")
  meals                Meal[]
  accounts             Account[]
  sessions             Session[]
  UserNutritionalStats UserNutritionalStats[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Meal {
  id            String                      @id @default(cuid())
  name          String
  createdAt     DateTime                    @default(now()) @map(name: "created_at")
  updatedAt     DateTime                    @default(now()) @map(name: "updated_at")
  servedAtDay   DateTime                    @default(now()) @map(name: "serverdAtDay")
  servedAtTime  String
  steps         String[]
  ingredients   Ingredients[]
  nutrition     MealNutritionalInformation?
  Users         User[]
  userId        String?
  image         String
  spoonacularId Int

  @@map(name: "meals")
}

model Ingredients {
  id        String   @id @default(cuid())
  meal      Meal     @relation(fields: [mealId], references: [id])
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  name      String
  amount    Float
  unit      String
  mealId    String

  @@map(name: "ingredients")
}

model MealNutritionalInformation {
  id        String   @id @default(cuid())
  mealId    String   @unique
  meal      Meal     @relation(fields: [mealId], references: [id])
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  calories  Int
  fat       Int
  protein   Int
  carbs     Int

  @@map(name: "meal_nutritional_information")
}

model UserNutritionalStats {
  id                String   @id @default(cuid())
  userId            String
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")
  weight            Int?
  height            Int?
  age               Int?
  restingHeartRate  Int?
  Cholesterol       String?
  bodyFatPercentage Int?
  vitaminD          Int?
  vitaminB12        Int?
  vitaminB6         Int?
  vitaminC          Int?
  testosterone      Int?
  hbA1c             Int?
  goal              String?
  User              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  // User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "user_nutritional_stats")
}
